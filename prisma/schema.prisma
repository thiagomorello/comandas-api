generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model alerts {
  id         Int     @id @default(autoincrement())
  product_id Int     @default(0)
  type       String? @db.VarChar(255)

  @@unique([product_id, type], map: "updateControl")
}

model balances {
  id      Int       @id @default(autoincrement())
  value   Float?    @db.Float
  date    DateTime? @db.DateTime(0)
  user_id Int       @unique

  @@index([user_id], map: "user_id")
}

model categories {
  id          Int     @id @default(autoincrement())
  category_id Int     @default(0)
  name        String? @db.VarChar(255)
  url         String? @db.VarChar(255)
}

model classes {
  id          Int     @id @default(autoincrement())
  type        String? @db.VarChar(255)
  name        String? @db.VarChar(255)
  description String? @db.LongText
  video       String? @db.LongText
  cover       String? @db.VarChar(255)
}

model classes_comments {
  id        Int     @id @default(autoincrement())
  classe_id Int     @default(0)
  parent_id Int     @default(0)
  user_id   Int     @default(0)
  msg       String? @db.LongText
  status    Int     @default(1)
}

model erp_queue {
  id         Int      @id @default(autoincrement())
  erp_id     Int      @unique(map: "erp_id") @default(0)
  created_at DateTime @default(now()) @db.Timestamp(0)
  errors     Int?     @default(0)
  status     Int      @default(0)
}

model expedition {
  id          Int       @id @default(autoincrement())
  user_id     Int       @default(0)
  name        String?   @db.VarChar(255)
  doc         String?   @db.VarChar(255)
  corp        String?   @db.VarChar(255)
  board       String    @db.VarChar(255)
  insert_date DateTime  @default(now()) @db.Timestamp(0)
  close_date  DateTime? @db.Timestamp(0)
  close_user  Int       @default(0)
  status      Int       @default(1)
}

model hub_mercadolivre_errors {
  id             Int       @id @default(autoincrement())
  user_id        Int
  integration_id Int
  keyword        String?   @db.VarChar(255)
  error_msg      String?   @db.LongText
  status         Int       @default(0)
  inserted_at    DateTime  @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@unique([user_id, integration_id, keyword], map: "user_id")
  @@index([keyword], map: "keyword")
}

model integrations {
  id                                                                 Int                         @id @default(autoincrement())
  name                                                               String?                     @db.VarChar(255)
  keyword                                                            String?                     @db.VarChar(255)
  msg                                                                String?                     @db.VarChar(255)
  erp_id                                                             Int                         @default(0)
  bling_id                                                           Int                         @default(0)
  params                                                             String?                     @db.LongText
  mode                                                               String                      @db.VarChar(11)
  type                                                               String?                     @db.VarChar(255)
  labels                                                             String?                     @db.VarChar(255)
  seller_info                                                        String?                     @db.LongText
  status                                                             Int                         @default(0)
  user_id                                                            Int                         @default(0)
  shop_id                                                            Int                         @default(0)
  is_cross                                                           Int?                        @default(0)
  crosscode                                                          String?                     @db.VarChar(255)
  crosscode_date                                                     DateTime?                   @db.Date
  update_date                                                        DateTime                    @default(now()) @db.Timestamp(0)
  insert_date                                                        DateTime?                   @db.Timestamp(0)
  fullfilment_orders_fullfilment_orders_erp_idTointegrations         fullfilment_orders[]        @relation("fullfilment_orders_erp_idTointegrations")
  fullfilment_orders_fullfilment_orders_integration_idTointegrations fullfilment_orders[]        @relation("fullfilment_orders_integration_idTointegrations")
  user_product_mercadolivre                                          user_product_mercadolivre[]

  @@index([bling_id], map: "bling_id")
  @@index([erp_id], map: "erp_id")
  @@index([keyword], map: "keyword")
  @@index([user_id], map: "user_id")
}

model items_mercadolivre {
  id               Int       @id @default(autoincrement())
  ml_id            String?   @db.VarChar(255)
  product_id       Int       @default(0)
  product_id_bling Int       @default(0)
  user_id          Int       @default(0)
  seller_id        Int       @default(0)
  integration_id   Int       @default(0)
  bling_id         String    @default(dbgenerated("(0)")) @db.VarChar(255)
  has_variations   Int?      @default(0)
  is_kit           Int       @default(0)
  error_msg        String?   @db.VarChar(255)
  status           Int       @default(0)
  inserted_at      DateTime? @db.Timestamp(0)
  updated_at       DateTime  @default(now()) @db.Timestamp(0)

  @@unique([ml_id, user_id, integration_id], map: "ml_id")
}

model items_mercadolivre_variations {
  id          Int       @id @default(autoincrement())
  parent_id   String?   @db.VarChar(255)
  ml_id       Int    @default(0)
  product_id  Int       @default(0)
  bling_id    String?   @db.VarChar(255)
  error_msg   String?   @db.VarChar(255)
  status      Int       @default(0)
  inserted_at DateTime? @db.Timestamp(0)
  updated_at  DateTime  @default(now()) @db.Timestamp(0)

  @@index([ml_id], map: "ml_id")
  @@index([parent_id], map: "parent_id")
}

model kits {
  id          Int      @id @default(autoincrement())
  sku         String?  @db.VarChar(255)
  insert_date DateTime @default(now()) @db.Timestamp(0)
  product_id  Int      @default(0)
  description String?  @db.LongText
  name        String?  @db.VarChar(255)
  img         String?  @db.LongText
  user_id     Int      @default(0)
  erp_id      Int      @default(0)
  qtd         Int      @default(1)
  price       Float?   @db.Float

  @@index([product_id], map: "product_id")
  @@index([sku], map: "sku")
  @@index([user_id], map: "user_id")
}

model order_costs {
  id         Int     @id @default(autoincrement())
  order_id   Int     @default(0)
  product_id Int
  cost       String? @db.VarChar(255)
  value      Float   @default(0.00) @db.Float

  @@unique([order_id, product_id, cost], map: "order_id")
}

model order_errors {
  id       Int     @id @default(autoincrement())
  order_id Int
  type     String? @db.VarChar(255)
  params   String? @db.LongText
}

model order_history {
  id          Int      @id @default(autoincrement())
  order_id    Int?     @default(0)
  type        String?  @db.VarChar(255)
  user_id     Int?     @default(0)
  team_id     Int?     @default(0)
  params      String?  @db.LongText
  insert_date DateTime @default(now()) @db.Timestamp(0)

  @@index([order_id], map: "order_id")
  @@index([team_id], map: "team_id")
  @@index([type], map: "type")
  @@index([user_id], map: "user_id")
}

model order_products {
  id         Int  @id @default(autoincrement())
  qtd        Int  @default(0)
  qtd_pack   Int  @default(0)
  order_id   Int  @default(0)
  product_id Int  @default(0)
  user_id    Int? @default(0)
  suplier_id Int  @default(0)

  @@unique([order_id, user_id, product_id, qtd], map: "updateControl")
}

model order_return {
  id              Int      @id @default(autoincrement())
  order_id        Int      @unique(map: "order_id") @default(0)
  user_id         Int      @default(0)
  store_name      String?  @db.VarChar(255)
  customer_name   String?  @db.VarChar(255)
  tracking_number String?  @db.VarChar(255)
  team_id         Int      @default(0)
  last_review     DateTime @default(now()) @db.Timestamp(0)
  reason          String?  @db.LongText
  status          Int      @default(1)
}

model orders {
  id                 Int                  @id @default(autoincrement())
  user_id            Int                  @default(0)
  pack_user          Int                  @default(0)
  suplier_id         Int                  @default(0)
  integration_id     Int                  @default(0)
  picking_id         Int                  @default(0)
  expedition_id      Int                  @default(0)
  user_blingid       Int                  @default(0)
  suplier_blingid    Int               @default(0)
  channel_order      String?              @db.VarChar(255)
  total              Float                @default(0.00) @db.Float
  total_frete        Float                @default(0.00) @db.Float
  total_itens        Float                @default(0.00) @db.Float
  total_custo        Float                @default(0.00) @db.Float
  total_conci        Float                @default(0.00) @db.Float
  total_suplier      Float                @default(0.00) @db.Float
  total_bling        Float                @default(0.00) @db.Float
  channel_id         String?              @db.VarChar(255)
  string_channel     String?              @db.VarChar(255)
  pickup_name        String?              @db.VarChar(255)
  isflex             Int                  @default(0)
  customer_name      String?              @db.LongText
  nfe_compra         String?              @db.LongText
  nfe_venda          String?              @db.LongText
  payment_link       String?              @db.VarChar(255)
  gateway_id         String?              @db.VarChar(255)
  transaction_id     String?              @db.VarChar(255)
  label              String?              @db.VarChar(255)
  filenfe            String?              @db.VarChar(255)
  alllabels          String?              @db.VarChar(255)
  error_msg          String?              @db.VarChar(255)
  cancel_msg         String?              @db.LongText
  saldo_msg          String?              @db.VarChar(255)
  insert_date        DateTime             @default(now()) @db.Timestamp(0)
  create_date        DateTime?            @db.Date
  send_date          DateTime?            @db.Timestamp(0)
  packing_date       DateTime?            @db.Timestamp(0)
  pay_date           DateTime?            @db.Timestamp(0)
  doc_date           DateTime?            @db.Timestamp(0)
  tracking_number    String?              @db.VarChar(255)
  tracking_type      String?              @db.VarChar(255)
  printed            Int                  @default(0)
  neednfe            Int                  @default(0)
  changed_by_user    Int                  @default(0)
  status             Int                  @default(1)
  transaction_orders transaction_orders[]

  @@index([channel_id], map: "channel_id")
  @@index([channel_order], map: "channel_order")
  @@index([expedition_id], map: "expedition_id")
  @@index([gateway_id], map: "gateway_id")
  @@index([insert_date], map: "insert_date")
  @@index([pay_date], map: "pay_date")
  @@index([picking_id], map: "picking_id")
  @@index([status], map: "status")
  @@index([string_channel], map: "string_channel")
  @@index([user_blingid], map: "user_blingid")
  @@index([user_id], map: "user_id")
  @@index([integration_id], map: "integration_id")
}

model payments {
  id             Int      @id @default(autoincrement())
  order_id       Int      @unique(map: "order_id") @default(0)
  payment_id     String   @default(dbgenerated("(0)")) @db.VarChar(11)
  erp_id         Int   @default(0)
  payment_date   DateTime @default(now()) @db.Timestamp(0)
  payment_method String?  @db.VarChar(255)
  amount         Float    @default(0.00) @db.Float
  status         Int      @default(0)
  fee            Float    @default(0.00) @db.Float
}

model picking {
  id                 Int                  @id @default(autoincrement())
  picking_date       DateTime             @default(now()) @db.Timestamp(0)
  picking_time       DateTime?            @db.Timestamp(0)
  status             Int                  @default(0)
  picking_separators picking_separators[]
}

model product_alias {
  id         Int     @id @default(autoincrement())
  user_id    Int     @default(0)
  product_id Int     @default(0)
  alias      String? @db.VarChar(255)
  sku        String? @db.VarChar(255)
  qtd        Int     @default(1)

  @@index([alias], map: "alias")
  @@index([product_id], map: "product_id")
  @@index([user_id], map: "user_id")
}

model product_queue {
  id           Int     @id @default(autoincrement())
  product_id   Int     @unique(map: "product_id")
  old_sku      String? @db.VarChar(255)
  original_sku String? @db.VarChar(255)
  atual_sku    String  @db.VarChar(255)
  status       Int     @default(0)
}

model products {
  id                           Int                            @id @default(autoincrement())
  parent_id                    String?                        @default(dbgenerated("(0)")) @db.VarChar(255)
  suplier_id                   Int?                           @default(0)
  bling_id                     Int                         @default(0)
  category_id                  Int                            @default(0)
  expect_date                  DateTime?                      @db.Timestamp(0)
  sku                          String?                        @db.VarChar(255)
  sku_bip                      String?                        @db.VarChar(255)
  wedropsku                    String?                        @unique(map: "wedropsku") @db.VarChar(255)
  name                         String?                        @db.VarChar(255)
  varname                      String?                        @db.VarChar(255)
  description                  String?                        @db.LongText
  price                        Float                          @default(0.00) @db.Float
  pricecost                    Float                          @default(0.00) @db.Float
  wedrop_price                 Float                          @default(0.00) @db.Float
  img                          String?                        @db.VarChar(255)
  plusimgs                     String?                        @db.VarChar(255)
  yt_video                     String?                        @db.VarChar(255)
  ean                          String?                        @db.VarChar(255)
  ean_bip                      String?                        @db.VarChar(255)
  ncm                          String?                        @db.VarChar(255)
  cest                         String?                        @db.VarChar(255)
  origem                       String?                        @db.VarChar(255)
  weight                       Float?                         @default(0.000) @db.Float
  width                        Float?                         @default(0.00) @db.Float
  height                       Float?                         @default(0.00) @db.Float
  length                       Float?                         @default(0.00) @db.Float
  stock                        Int?                           @default(0)
  address                      String?                        @db.VarChar(255)
  address1                     String?                        @db.VarChar(255)
  address2                     String?                        @db.VarChar(255)
  address3                     String?                        @db.VarChar(255)
  address4                     String?                        @db.VarChar(255)
  warehouse                    Int?
  corridor                     Int?
  rack                         Int?
  side                         String?                        @db.VarChar(11)
  brand                        String?                        @db.VarChar(255)
  insert_date                  DateTime                       @default(now()) @db.Timestamp(0)
  updated_at                   DateTime?                      @db.Timestamp(0)
  last_user_id                 Int                            @default(0)
  status                       Int                            @default(1)
  fullfilment_order_products   fullfilment_order_products[]
  products_ml                  products_ml[]
  user_mercadolivre_variations user_mercadolivre_variations[]
  user_product_mercadolivre    user_product_mercadolivre[]
  variation_products           variation_products[]

  @@unique([suplier_id, sku], map: "suplier_sku")
  @@index([address], map: "address")
  @@index([address1, address2, address3, address4], map: "address1_address2_address3_address4")
}

model reorder_products {
  id         Int  @id @default(autoincrement())
  qtd        Int  @default(0)
  qtd_pack   Int  @default(0)
  order_id   Int  @default(0)
  product_id Int  @default(0)
  user_id    Int? @default(0)
  suplier_id Int  @default(0)

  @@unique([order_id, user_id, product_id, qtd], map: "updateControl")
}

model return_history {
  id          Int      @id @default(autoincrement())
  return_id   Int      @default(0)
  order_id    Int      @default(0)
  user_id     Int      @default(0)
  insert_date DateTime @default(now()) @db.Timestamp(0)
  msg         String?  @db.LongText
  status      Int      @default(1)
}

model stock_queue {
  id           Int   @id @default(autoincrement())
  product_id   Int      @unique(map: "product_id") @default(0)
  sku          String?  @db.LongText
  stock        Int      @default(0)
  suplier_id   Int      @default(0)
  status       Int      @default(0)
  updated_time DateTime @default(now()) @db.Timestamp(0)
}

model suplier_account {
  id          Int      @id @default(autoincrement())
  suplier_id  Int      @default(0)
  value       Float    @default(0.00) @db.Float
  type        Int      @default(1)
  doc         String?  @db.VarChar(255)
  insert_date DateTime @default(now()) @db.Timestamp(0)
  status      Int      @default(1)
}

model suplier_orders {
  id              Int       @id @default(autoincrement())
  user_id         Int       @default(0)
  user_blingid    Int       @default(0)
  suplier_blingid Int       @default(0)
  total           Float     @default(0.00) @db.Float
  total_frete     Float     @default(0.00) @db.Float
  total_itens     Float     @default(0.00) @db.Float
  channel_id      String?   @db.VarChar(255)
  string_channel  String?   @db.VarChar(255)
  customer_name   String?   @db.VarChar(255)
  nfe_compra      String?   @db.VarChar(255)
  nfe_venda       String?   @db.VarChar(255)
  insert_date     DateTime  @default(now()) @db.Timestamp(0)
  create_date     DateTime? @db.Date
  status          Int       @default(1)

  @@unique([user_id, user_blingid], map: "updateControl")
}

model supliers {
  id               Int     @id @default(autoincrement())
  name             String? @db.VarChar(255)
  params           String? @db.LongText
  can_change_infos Int     @default(0)
  tax              Float   @default(0) @db.Float
  status           Int     @default(1)
}

model test {
  id          Int       @id @default(autoincrement())
  keyword     String?   @db.VarChar(255)
  params      String?   @db.LongText
  insert_date DateTime? @db.Timestamp(0)
}

model transaction_orders {
  transaction_id Int
  order_id       Int
  id             Int          @id @default(autoincrement())
  orders         orders       @relation(fields: [order_id], references: [id], onUpdate: Restrict, map: "fk_transactions_has_orders_orders")
  transactions   transactions @relation(fields: [transaction_id], references: [id], onUpdate: Restrict, map: "fk_transactions_has_orders_transactions")

  @@index([order_id], map: "fk_transactions_has_orders_order_idx")
  @@index([transaction_id], map: "fk_transactions_has_orders_transactions_idx")
}

model transactions {
  id                 Int                  @id @default(autoincrement())
  inserted_date      DateTime?            @default(now()) @db.Timestamp(0)
  value              Float?               @db.Float
  balance            Float?               @db.Float
  description        String?              @db.VarChar(200)
  type               String?              @db.Char(1)
  rate_value         Float?               @db.Float
  rate_percent       Float?               @db.Float
  user_id            Int
  type_payments_id   Int
  rate               Float                @db.Float
  total              Float?               @db.Float
  transaction_orders transaction_orders[]
  type_payments      type_payments        @relation(fields: [type_payments_id], references: [id], onUpdate: Restrict, map: "fk_transactions_type_payments")
  wallet_payments    wallet_payments[]

  @@index([type_payments_id], map: "type_payments_id")
  @@index([user_id], map: "user_id")
  @@index([inserted_date], map: "inserted_date")
}

model type_payments {
  id           Int            @id @default(autoincrement())
  description  String?        @db.VarChar(100)
  type         String?        @db.Char(1)
  rate_value   Float?         @db.Float
  rate_percent Float?         @db.Float
  transactions transactions[]
}

model user_account {
  id            Int      @id @default(autoincrement())
  user_id       Int      @default(0)
  order_id      Int      @default(0)
  order_dest    String?  @db.VarChar(255)
  product_id    Int      @default(0)
  value_date    DateTime @default(now()) @db.Timestamp(0)
  qtd           Int      @default(0)
  qtd_utilizada Int      @default(0)
  type          Int      @default(0)
  status        Int
}

model user_account2 {
  id            Int      @id @default(autoincrement())
  user_id       Int      @default(0)
  order_id      Int      @default(0)
  order_dest    String?  @db.VarChar(255)
  product_id    Int      @default(0)
  value_date    DateTime @default(now()) @db.Timestamp(0)
  qtd           Int      @default(0)
  qtd_utilizada Int      @default(0)
  type          Int      @default(0)
  status        Int
}

model user_config {
  id      Int     @id @default(autoincrement())
  user_id Int     @unique(map: "user_id") @default(0)
  mode    String  @default(dbgenerated("(F)")) @db.VarChar(11)
  params  String? @db.LongText
  dados   String? @db.LongText
}

model user_errors {
  id         Int      @id @default(autoincrement())
  user_id    Int      @default(0)
  product_id Int      @default(0)
  erp_id     Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  msg        String?  @db.LongText
  error_msg  String?  @db.LongText
  status     Int      @default(0)

  @@unique([user_id, product_id, erp_id], map: "user_id")
  @@index([status], map: "status")
}

model user_product {
  id             Int   @id @default(autoincrement())
  integration_id Int      @default(0)
  product_id     Int      @default(0)
  user_id        Int      @default(0)
  insert_date    DateTime @default(now()) @db.Timestamp(0)

  @@unique([user_id, product_id, integration_id], map: "userUpdateControl")
}

model users {
  id                                                                     Int                          @id @default(autoincrement())
  suplier_id                                                             Int                          @default(0)
  name                                                                   String?                      @db.VarChar(255)
  email                                                                  String?                      @unique(map: "email") @db.VarChar(255)
  password                                                               String?                      @default(dbgenerated("(202cb962ac59075b964b07152d234b70)")) @db.VarChar(255)
  type                                                                   Int                          @default(1)
  img                                                                    String?                      @db.VarChar(255)
  first                                                                  Int                          @default(1)
  isbeta                                                                 Int                          @default(0)
  terms                                                                  String?                      @db.LongText
  insert_date                                                            DateTime                     @default(now()) @db.Timestamp(0)
  status                                                                 Int                          @default(0)
  fullfilment_order_products_fullfilment_order_products_user_idTousers   fullfilment_order_products[] @relation("fullfilment_order_products_user_idTousers")
  fullfilment_order_products_fullfilment_order_products_user_packTousers fullfilment_order_products[] @relation("fullfilment_order_products_user_packTousers")
  fullfilment_orders_fullfilment_orders_user_idTousers                   fullfilment_orders[]         @relation("fullfilment_orders_user_idTousers")
  fullfilment_orders_fullfilment_orders_user_verifyTousers               fullfilment_orders[]         @relation("fullfilment_orders_user_verifyTousers")
  fullfilment_orders_fullfilment_orders_user_packTousers                 fullfilment_orders[]         @relation("fullfilment_orders_user_packTousers")
  fullfilment_orders_fullfilment_orders_user_deliveredTousers            fullfilment_orders[]         @relation("fullfilment_orders_user_deliveredTousers")
  user_product_mercadolivre                                              user_product_mercadolivre[]
  variations                                                             variations[]
  wallet_payments                                                        wallet_payments[]

  @@index([password], map: "password")
  @@index([status], map: "status")
  @@index([type], map: "type")
}

model mercadolivre_items {
  id                        Int                        @id @default(autoincrement())
  ml_id                     String?                    @unique(map: "ml_id") @db.VarChar(100)
  title                     String?                    @db.VarChar(100)
  img                       String?                    @db.VarChar(255)
  permalink                 String?                    @db.VarChar(255)
  list_type                 String?                    @db.VarChar(100)
  price                     Float                      @db.Float
  status                    String                     @db.VarChar(50)
  user_product_mercadolivre user_product_mercadolivre? @relation(fields: [ml_id], references: [ml_id], onUpdate: SetNull, map: "FK1_ml_item_id")
}

model user_mercadolivre_variations {
  id                           Int                       @id @default(autoincrement())
  user_product_mercadolivre_id Int
  product_id                   Int?
  ml_variation_id              String?                   @db.VarChar(100)
  attributes                   String?                   @db.VarChar(100)
  user_product_mercadolivre    user_product_mercadolivre @relation(fields: [user_product_mercadolivre_id], references: [id], onDelete: Cascade, map: "FK1_ml_father_id")
  products                     products?                 @relation(fields: [product_id], references: [id], onUpdate: SetNull, map: "FK2_ml_variation_product_id")

  @@index([user_product_mercadolivre_id], map: "FK1_ml_father_id")
  @@index([product_id], map: "FK2_ml_variation_product_id")
}

model user_product_mercadolivre {
  id                           Int                            @id @default(autoincrement())
  user_id                      Int
  integration_id               Int
  product_id                   Int?
  ml_id                        String                         @unique(map: "ml_id") @default(dbgenerated("()")) @db.VarChar(100)
  erp_sku                      String                         @default(dbgenerated("()")) @db.VarChar(100)
  mercadolivre_items           mercadolivre_items?
  user_mercadolivre_variations user_mercadolivre_variations[]
  users                        users                          @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "FK1_ml_user_id")
  integrations                 integrations                   @relation(fields: [integration_id], references: [id], onDelete: Cascade, map: "FK2_ml_integration_id")
  products                     products?                      @relation(fields: [product_id], references: [id], onUpdate: SetNull, map: "FK3_ml_product_id")

  @@index([user_id], map: "FK1_ml_user_id")
  @@index([integration_id], map: "FK2_ml_integration_id")
  @@index([product_id], map: "FK3_ml_product_id")
}

model variation_products {
  id           Int        @id @default(autoincrement())
  variation_id Int
  product_id   Int
  sku          String?    @db.VarChar(255)
  name         String?    @db.VarChar(255)
  price        Float?     @default(0.00) @db.Float
  variations   variations @relation(fields: [variation_id], references: [id], onDelete: Cascade, map: "FK1_variation")
  products     products   @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "FK2_product")

  @@index([variation_id], map: "FK1_variation")
  @@index([product_id], map: "FK2_product")
}

model variations {
  id                 Int                  @id @default(autoincrement())
  user_id            Int?
  name               String?              @db.VarChar(255)
  sku                String?              @db.VarChar(255)
  inserted_at        DateTime?            @db.Timestamp(0)
  varation_kits      varation_kits[]
  variation_products variation_products[]
  users              users?               @relation(fields: [user_id], references: [id], onDelete: Restrict, map: "FKuser_id")

  @@unique([user_id, sku], map: "user_id_sku")
}

model wallet_payments {
  id                 Int           @id @default(autoincrement())
  gateway_payment_id String?       @db.VarChar(255)
  transaction_id     Int?
  user_id            Int?
  value              Float?        @db.Float
  status             String?       @db.VarChar(50)
  created_at         DateTime?     @default(now()) @db.Timestamp(0)
  updated_at         DateTime?     @db.Timestamp(0)
  transactions       transactions? @relation(fields: [transaction_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK1wallet_transaction_id")
  users              users?        @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK2wallet_user_id")

  @@index([transaction_id], map: "FK1wallet_transaction_id")
  @@index([user_id], map: "FK2wallet_user_id")
  @@index([gateway_payment_id], map: "gateway_payment_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model kit_alias {
  id      Int?
  alias   String? @db.VarChar(255)
  kit_sku String? @db.VarChar(255)
  user_id Int?

  @@ignore
}

model stockfix {
  id            Int     @id @default(autoincrement())
  sku           String? @unique(map: "sku") @db.VarChar(255)
  stock_atom    Int?
  stock_initial Int?
  stock_wedrop  Int?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model varation_kits {
  id           Int         @id @default(autoincrement())
  variation_id Int?        @default(0)
  kit_sku      String?     @db.VarChar(255)
  sku          String?     @db.VarChar(255)
  name         String?     @db.VarChar(255)
  price        Float?      @default(0.00) @db.Float
  variations   variations? @relation(fields: [variation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK1_kit_variations")

  @@index([variation_id], map: "FK1_kit_variations")
}

model fullfilment_orders {
  id                                                           Int                          @id @default(autoincrement())
  user_id                                                      Int?
  erp_id                                                       Int?
  integration_id                                               Int?
  user_verify                                                  Int?
  user_pack                                                    Int?
  user_delivered                                               Int?
  cnpj                                                         String                       @default(dbgenerated("(0)")) @db.VarChar(100)
  seller_info                                                  String?                      @db.LongText
  channel                                                      String?                      @db.VarChar(100)
  phone                                                        String?                      @db.VarChar(100)
  doc                                                          String?                      @db.VarChar(255)
  doc2                                                         String?                      @db.VarChar(255)
  doc3                                                         String?                      @db.VarChar(255)
  volumes                                                      Int?
  total                                                        Float?                       @default(0) @db.Float
  discount                                                     Float?                       @default(0) @db.Float
  created_at                                                   DateTime?                    @default(now()) @db.Timestamp(0)
  verified_at                                                  DateTime?                    @db.Timestamp(0)
  can_be_picket_at                                             DateTime?                    @db.Date
  payment_at                                                   DateTime?                    @db.Timestamp(0)
  packed_at                                                    DateTime?                    @db.Timestamp(0)
  delivered_at                                                 DateTime?                    @db.Timestamp(0)
  status                                                       Int?                         @default(0)
  fullfilment_order_products                                   fullfilment_order_products[]
  users_fullfilment_orders_user_idTousers                      users?                       @relation("fullfilment_orders_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK1fulluser_id")
  integrations_fullfilment_orders_erp_idTointegrations         integrations?                @relation("fullfilment_orders_erp_idTointegrations", fields: [erp_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK2fullerp_id")
  integrations_fullfilment_orders_integration_idTointegrations integrations?                @relation("fullfilment_orders_integration_idTointegrations", fields: [integration_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK3fullintegration_id")
  users_fullfilment_orders_user_verifyTousers                  users?                       @relation("fullfilment_orders_user_verifyTousers", fields: [user_verify], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK4fulluser_verify")
  users_fullfilment_orders_user_packTousers                    users?                       @relation("fullfilment_orders_user_packTousers", fields: [user_pack], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK5user_pack")
  users_fullfilment_orders_user_deliveredTousers               users?                       @relation("fullfilment_orders_user_deliveredTousers", fields: [user_delivered], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK6user_delivered")

  @@index([user_id], map: "FK1fulluser_id")
  @@index([erp_id], map: "FK2fullerp_id")
  @@index([integration_id], map: "FK3fullintegration_id")
  @@index([user_verify], map: "FK4fulluser_verify")
  @@index([user_pack], map: "FK5user_pack")
  @@index([user_delivered], map: "FK6user_delivered")
}

model picking_separators {
  id           Int        @id @default(autoincrement())
  picking_id   Int
  separator_id Int
  init_time    DateTime?  @db.Timestamp(0)
  end_time     DateTime?  @db.Timestamp(0)
  status       Int?       @default(0)
  picking      picking    @relation(fields: [picking_id], references: [id], onDelete: Cascade, map: "FK1separatorpicking")
  separators   separators @relation(fields: [separator_id], references: [id], onDelete: Cascade, map: "FK2SEPARATOR")

  @@index([picking_id], map: "FK1separatorpicking")
  @@index([separator_id], map: "separator_id")
}

model products_ml {
  id           Int       @id @default(autoincrement())
  product_id   Int?
  blingData    String?   @db.LongText
  mlData       String?   @db.LongText
  is_variation Int?      @default(0)
  health       Float?    @default(0) @db.Float
  is_active    Int?      @default(0)
  products     products? @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "FK1productsml_product_id")

  @@index([product_id], map: "FK1productsml_product_id")
}

model products_ml_variations {
  id             Int  @id
  mlid           Int?
  product_id     Int?
  products_ml_id Int?
}

model recover_password {
  id         Int       @id @default(autoincrement())
  user_id    Int       @default(0)
  token      String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  situation  Int?      @default(0)

  @@index([user_id], map: "user_id")
}

model separators {
  id                 Int                  @id @default(autoincrement())
  code               Int?
  name               String?              @db.VarChar(255)
  picking_separators picking_separators[]
}

model stock_history {
  id          Int       @id @default(autoincrement())
  inserted_at DateTime? @db.Timestamp(0)
  sku         String?   @db.VarChar(255)
  stock       Int?

  @@index([inserted_at], map: "inserted_at")
}

model fullfilment_order_products {
  id                                                Int                 @id @default(autoincrement())
  order_id                                          Int?
  user_id                                           Int?
  user_pack                                         Int?
  product_id                                        Int?
  kit_sku                                           String?             @db.VarChar(255)
  qtd                                               Int?
  qtd_verified                                      Int?
  qtd_pack                                          Int?
  labels                                            String?             @db.VarChar(255)
  fullfilment_orders                                fullfilment_orders? @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK1full_order_id")
  users_fullfilment_order_products_user_idTousers   users?              @relation("fullfilment_order_products_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK2full_user_id")
  users_fullfilment_order_products_user_packTousers users?              @relation("fullfilment_order_products_user_packTousers", fields: [user_pack], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK3full_user_pack")
  products                                          products?           @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK4full_product_id")

  @@index([order_id], map: "FK1full_order_id")
  @@index([user_id], map: "FK2full_user_id")
  @@index([user_pack], map: "FK3full_user_pack")
  @@index([product_id], map: "FK4full_product_id")
}
